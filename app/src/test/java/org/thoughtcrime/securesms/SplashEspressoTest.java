package org.thoughtcrime.securesms;


import androidx.test.espresso.DataInteraction;
import androidx.test.espresso.ViewInteraction;
import androidx.test.filters.LargeTest;
import androidx.test.rule.ActivityTestRule;
import androidx.test.rule.GrantPermissionRule;
import androidx.test.runner.AndroidJUnit4;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;

import static androidx.test.InstrumentationRegistry.getInstrumentation;
import static androidx.test.espresso.Espresso.onData;
import static androidx.test.espresso.Espresso.onView;
import static androidx.test.espresso.Espresso.pressBack;
import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;
import static androidx.test.espresso.action.ViewActions.*;
import static androidx.test.espresso.assertion.ViewAssertions.*;
import static androidx.test.espresso.matcher.ViewMatchers.*;

import org.thoughtcrime.securesms.R;

import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsInstanceOf;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.anything;
import static org.hamcrest.Matchers.is;

@LargeTest
@RunWith(AndroidJUnit4.class)
//This espresso test was generated by the record espresso test feature built into android studio 
public class SplashEspressoTest {

    @Rule
    public ActivityTestRule<MainActivity> mActivityTestRule = new ActivityTestRule<>(MainActivity.class);

    @Rule
    public GrantPermissionRule mGrantPermissionRule =
            GrantPermissionRule.grant(
                    "android.permission.READ_CONTACTS",
"android.permission.WRITE_CONTACTS",
"android.permission.READ_PHONE_STATE");

    @Test
    public void splashEspressoTest() {
        ViewInteraction circularProgressButton = onView(
allOf(withId(R.id.welcome_continue_button), withText("Continue"),
childAtPosition(
childAtPosition(
withId(R.id.nav_host_fragment),
0),
3),
isDisplayed()));
        circularProgressButton.perform(click());

        ViewInteraction appCompatButton = onView(
allOf(withId(android.R.id.button1), withText("Continue"),
childAtPosition(
childAtPosition(
withClassName(is("android.widget.ScrollView")),
0),
3)));
        appCompatButton.perform(scrollTo(), click());

        pressBack();

        ViewInteraction circularProgressButton2 = onView(
allOf(withId(R.id.registerButton), withText("Next"),
childAtPosition(
childAtPosition(
withId(R.id.scroll_view),
0),
5)));
        circularProgressButton2.perform(scrollTo(), click());

        ViewInteraction appCompatEditText = onView(
allOf(withId(R.id.pin_restore_pin_input),
childAtPosition(
childAtPosition(
withClassName(is("android.widget.ScrollView")),
0),
2)));
        appCompatEditText.perform(scrollTo(), replaceText("7212"), closeSoftKeyboard());

        ViewInteraction circularProgressButton3 = onView(
allOf(withId(R.id.pin_restore_pin_confirm), withText("Continue"),
childAtPosition(
childAtPosition(
withClassName(is("android.widget.ScrollView")),
0),
6)));
        circularProgressButton3.perform(scrollTo(), click());

        ViewInteraction circularProgressButton4 = onView(
allOf(withId(R.id.finish_button), withText("Next"),
childAtPosition(
allOf(withId(R.id.container),
childAtPosition(
withClassName(is("android.widget.FrameLayout")),
0)),
1),
isDisplayed()));
        circularProgressButton4.perform(click());

        ViewInteraction viewGroup = onView(
allOf(childAtPosition(
allOf(withId(R.id.fragment_container),
childAtPosition(
withId(android.R.id.content),
0)),
0),
isDisplayed()));
        viewGroup.check(matches(isDisplayed()));
        }

    private static Matcher<View> childAtPosition(
            final Matcher<View> parentMatcher, final int position) {

        return new TypeSafeMatcher<View>() {
            @Override
            public void describeTo(Description description) {
                description.appendText("Child at position " + position + " in parent ");
                parentMatcher.describeTo(description);
            }

            @Override
            public boolean matchesSafely(View view) {
                ViewParent parent = view.getParent();
                return parent instanceof ViewGroup && parentMatcher.matches(parent)
                        && view.equals(((ViewGroup)parent).getChildAt(position));
            }
        };
    }
    }
